#!/usr/bin/python

import requests
import json
import time
import os

# api tokens
weather_api_token = '288eaa3e24928fe1624619297e907e5b'
geoip_api_token = 'access_key=706012c40c1b18043fdcba7c996911bd' # create account at https://darksky.net/dev/

def STALE_TIME(min):
    return min * 60

# check if the cache is stale
def check_cache():
    try:
        with open("/var/cache/weatherCache", 'r') as f:
            last = float(f.readline())
            # if < 20 min from timestamp in cache
            if time.time() - last < STALE_TIME(20):
                return True
            else:
                return False
    except:
        return False

# return cache contents
def get_cache():
    with open("/var/cache/weatherCache", 'r') as f:
        output = ""
        lines = f.readlines()[1:]
        for line in lines:
            output += line
        return output

# function to get ip address
def get_ip():
    try:
        ip_url = "http://jsonip.com/"
        req = requests.get(ip_url)
        ip_json = json.loads(req.text)
        return ip_json['ip']
    except Exception as e:
        f.write("Error: %s." %e)
        traceback.print_exc()
        return "Error: %s. Cannot get ip." % e

# get lat and lon location from ip address
def get_loc():
    location_req_url = "http://api.ipstack.com/%s?%s" % (get_ip(), geoip_api_token)
    r = requests.get(location_req_url)
    location_obj = json.loads(r.text)
    lat = location_obj['latitude']
    lon = location_obj['longitude']
    return [lat, lon]


# get weather from latitude and longitude
def get_weather(coord):
    weather_req_url = "https://api.darksky.net/forecast/%s/%s,%s?lang=%s&units=%s" % (weather_api_token, coord[0], coord[1], 'en','us')
    r = requests.get(weather_req_url)
    weather_obj = json.loads(r.text)
    return weather_obj

# convert degress into cardinal direction
def get_Dir(degrees):
    cardinal = ['N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW', 'N']
    return cardinal[int(round(degrees/45.0))]


# parse out relevant forecast
def get_forecast():
    if check_cache():
        return get_cache()
    else:
        # gather weather information
        weather = get_weather(get_loc())
        temp = str(weather['currently']['temperature']) + "F "
        windSpeed = str(weather['currently']['windSpeed']) + " mph "
        windDir = get_Dir(int(weather['currently']['windBearing']))
        condition = " " + str(weather['currently']['summary'])
        summary = "\nForecast: " + str(weather['daily']['data'][0]['summary'].encode('utf-8'))
        output = "Current weather: " + temp + windSpeed + windDir + condition + summary

        #write to cache
        try:
            f = open("/var/cache/weatherCache", 'w+')
            f.write(str(time.time())+ '\n')
            f.write(output)
        except:
            # skip the cache
            pass

        return output


print(get_forecast())
